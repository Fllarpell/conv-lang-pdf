98
PROCESSES AND THREADS
CHAP. 2
We hav e seen this argument once before. It is precisely the argument for 
having processes. Instead of thinking about interrupts, timers, and context switches,
we can think about parallel processes. Only now with threads we add a new 
element: the ability for the parallel entities to share an address space and all of its data
among themselves. This ability is essential for certain applications, which is why
having multiple processes (with their separate address spaces) will not work.
A second argument for having threads is that since they are lighter weight than
processes, they are easier (i.e., faster) to create and destroy. In many systems,
creating a thread goes 10–100 times faster than creating a process. When the 
number of threads needed changes dynamically and rapidly, this property is useful to
have.
A third reason for having threads is also a performance argument. Threads
yield no performance gain when all of them are CPU bound, but when there is 
substantial computing and also substantial I/O, having threads allows these activities
to overlap, thus speeding up the application.
Finally, threads are useful on systems with multiple CPUs, where real 
parallelism is possible. We will come back to this issue in Chap. 8.
It is easiest to see why threads are useful by looking at some concrete 
examples. As a first example, consider a word processor. Word processors usually 
display the document being created on the screen formatted exactly as it will appear
on the printed page. In particular, all the line breaks and page breaks are in their
correct and final positions, so that the user can inspect them and change the 
document if need be (e.g., to eliminate widows and orphans—incomplete top and 
bottom lines on a page, which are considered esthetically unpleasing).
Suppose that the user is writing a book. From the author’s point of view, it is
easiest to keep the entire book as a single file to make it easier to search for topics,
perform global substitutions, and so on. Alternatively, each chapter might be a 
separate file. However, having every section and subsection as a separate file is a real
nuisance when global changes have to be made to the entire book, since then 
hundreds of files have to be individually edited, one at a time. For example, if 
proposed standard xxxx is approved just before the book goes to press, all occurrences of
‘‘Draft Standard xxxx’’ hav e to be changed to ‘‘Standard xxxx’’ at the last minute.
If the entire book is one file, typically a single command can do all the 
substitutions. In contrast, if the book is spread over 300 files, each one must be edited 
separately.
Now consider what happens when the user suddenly deletes one sentence from
page 1 of an 800-page book. After checking the changed page for correctness, she
now wants to make another change on page 600 and types in a command telling
the word processor to go to that page (possibly by searching for a phrase occurring
only there). The word processor is now forced to reformat the entire book up to
page 600 on the spot because it does not know what the first line of page 600 will
be until it has processed all the previous pages. There may be a substantial delay
before page 600 can be displayed, leading to an unhappy user.
