SEC. 5.3
I/O SOFTWARE LAYERS
369
An example of a similar procedure for input is scanf, which reads input and
stores it into variables described in a format string using the same syntax as printf.
The standard I/O library contains a number of procedures that involve I/O and all
run as part of user programs.
Not all user-level I/O software consists of library procedures. Another 
important category is the spooling system. Spooling is a way of dealing with dedicated
I/O devices in a multiprogramming system. Consider a typical spooled device: a
printer. Although it would be technically easy to let any user process open the
character special file for the printer, suppose a process opened it and then did 
nothing for hours. No other process could print anything.
Instead what is done is to create a special process, called a daemon, and a 
special directory, called a spooling directory. To print a file, a process first generates
the entire file to be printed and puts it in the spooling directory. It is up to the 
daemon, which is the only process having permission to use the printer’s special file,
to print the files in the directory. By protecting the special file against direct use by
users, the problem of having someone keeping it open unnecessarily long is 
eliminated.
Figure 5-17 summarizes the I/O system, showing all the layers and the 
principal functions of each layer. Starting at the bottom, the layers are the hardware,
interrupt handlers, device drivers, device-independent software, and finally the user
processes.
I/O!
request
Layer
I/O!
reply
I/O functions
Make I/O call; format I/O; spooling!
Naming, protection, blocking, buffering, allocation!
Set up device registers; check status!
Wake up driver when I/O completed!
Perform I/O operation
User processes
Device-independent!
software
Device drivers
Interrupt handlers
Hardware
Figure 5-17. Layers of the I/O system and the main functions of each layer.
The arrows in Fig. 5-17 show the flow of control. When a user program tries to
read a block from a file, for example, the operating system is invoked to carry out
the call. The device-independent software looks for it, say, in the buffer cache. If
the needed block is not there, it calls the device driver to issue the request to the
hardware to go get it from the SSD or disk. The process is then blocked until this
operation has been completed and the data are safely available in the caller’s 
buffer. The operation may take milliseconds, which is too long for the CPU to be idle.
