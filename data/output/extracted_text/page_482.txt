SEC. 6.4
DEADLOCK DETECTION AND RECOVERY
453
The deadlock detection algorithm can now be giv en as follows:
1. Look for an unmarked process, Pi, for which the ith row of R is less
than or equal to A.
2. If such a process is found, add the ith row of C to A, mark the process,
and go back to step 1.
3. If no such process exists, the algorithm terminates.
When the algorithm finishes, all the unmarked processes, if any, are deadlocked.
What the algorithm is doing in step 1 is looking for a process that can be run to
completion. Such a process is characterized as having resource demands that can
be met by the currently available resources. The selected process is then run until
it finishes, at which time it returns the resources it is holding to the pool of 
available resources. It is then marked as completed. If all the processes are ultimately
able to run to completion, none of them are deadlocked. If some of them can never
finish, they are deadlocked. Although the algorithm is nondeterministic (because it
may run the processes in any feasible order), the result is always the same.
As an example of how the deadlock detection algorithm works, see Fig. 6-10.
Here we have three processes and four resource classes, which we have arbitrarily
labeled tape drives, plotters, scanners, and cameras. Process 1 has one scanner.
Process 2 has two tape drives and a camera. Process 3 has a plotter and two 
scanners. Each process needs additional resources, as shown by the R matrix.
Tape drives
Tape drives
Plotters
Plotters
Scanners
Scanners
E = ( 4 
2 
3 
1 )
Current allocation matrix
Request matrix
A = ( 2 
1 
0 
0 )
C =
0 
0 
1 
0
2 
0 
0 
1
0 
1 
2 
0
Cameras
R =
2 
0 
0 
1
1 
0 
1 
0
2 
1 
0 
0
Cameras
Figure 6-10. An example for the deadlock detection algorithm.
To run the deadlock detection algorithm, we look for a process whose resource
request can be satisfied. The first one cannot be satisfied because there is no 
camera available. The second cannot be satisfied either, because there is no scanner
free. Fortunately, the third one can be satisfied, so process 3 runs and eventually
returns all its resources, giving
A = (2 2 2 0)
At this point process 2 can run and return its resources, giving
A = (4 2 2 1)
Now the remaining process can run. There is no deadlock in the system.
