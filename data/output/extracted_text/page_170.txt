SEC. 2.4 SYNCHRONIZATION AND INTERPROCESS COMMUNICATION
141
It is up to the compiler to implement mutual exclusion on monitor entries, but
a common way is to use a mutex or a binary semaphore. Because the compiler, not
the programmer, is arranging for the mutual exclusion, it is much less likely that
something will go wrong. In any event, the person writing the monitor does not
have to be aware of how the compiler arranges for mutual exclusion. It is sufficient
to know that by turning all the critical regions into monitor procedures, no two
processes will ever execute their critical regions at the same time.
Although monitors provide an easy way to achieve mutual exclusion, as we
have seen above, that is not enough. We also need a way for processes to block
when they cannot proceed. In the producer-consumer problem, it is easy enough to
put all the tests for buffer-full and buffer-empty in monitor procedures, but how
should the producer block when it finds the buffer full?
The solution lies again in the introduction of condition variables, along with
two operations on them, wait and signal. When a monitor procedure discovers that
it cannot continue (e.g., the producer finds the buffer full), it does a wait on some
condition variable, say, full. This action causes the calling process to block. It also
allows another process that had been previously prohibited from entering the 
monitor to enter now. We saw condition variables and these operations in the context of
Pthreads earlier.
This other process, for example, the consumer, can wake up its sleeping 
partner by doing a signal on the condition variable that its partner is waiting on. To
avoid having two active processes in the monitor at the same time, we need a rule
telling what happens after a signal. Hoare proposed letting the newly awakened
process run, suspending the other one. Brinch Hansen proposed finessing the 
problem by requiring that a process doing a signal must exit the monitor immediately.
In other words, a signal statement may appear only as the final statement in a 
monitor procedure. We will use Brinch Hansenâ€™s proposal because it is conceptually
simpler and is also easier to implement. If a signal is done on a condition variable
on which several processes are waiting, only one of them, determined by the 
system scheduler, is reviv ed.
As an aside, there is also a third solution, not proposed by either Hoare or
Brinch Hansen. This is to let the signaler continue to run and allow the waiting
process to start running only after the signaler has exited the monitor.
Condition variables are not counters. They do not accumulate signals for later
use the way semaphores do. Thus, if a condition variable is signaled with no one
waiting on it, the signal is lost forever. In other words, the wait must come before
the signal. This rule makes the implementation much simpler. In practice, it is not
a problem because it is easy to keep track of the state of each process with 
variables, if need be. A process that might otherwise do a signal can see that this 
operation is not necessary by looking at the variables.
A skeleton of the producer-consumer problem with monitors is given in
Fig. 2-35 in Pidgin Pascal. The advantage of using Pidgin Pascal here is that it is
pure and simple and follows the Hoare/Brinch Hansen model exactly.
