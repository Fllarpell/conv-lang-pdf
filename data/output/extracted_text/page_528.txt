SEC. 7.7
I/O VIRTUALIZATION
499
virtual environment, the hypervisor can set up the page tables in such a way that a
device performing DMA will not trample over memory that does not belong to the
virtual machine on whose behalf it is working.
I/O MMUs offer different advantages when dealing with a device in a 
virtualized world. Device pass through allows the physical device to be directly 
assigned to a specific virtual machine. In general, it would be ideal if device address
space were exactly the same as the guest’s physical address space. However, this is
unlikely—unless you have an I/O MMU. The MMU allows the addresses to
remapped transparently, and both the device and the virtual machine are blissfully
unaware of the address translation that takes place under the hood.
Device isolation ensures that a device assigned to a virtual machine can 
directly access that virtual machine without jeopardizing the integrity of the other guests.
In other words, the I/O MMU prevents rogue DMA traffic, just as a normal MMU
prevents rogue memory accesses from processes—in both cases accesses to 
unmapped pages result in faults.
DMA and addresses are not the whole I/O story, unfortunately. For 
completeness, we also need to virtualize interrupts, so that the interrupt generated by a 
device arrives at the right virtual machine, with the right interrupt number. Modern
I/O MMUs therefore support interrupt remapping. Say, a device sends a 
message signaled interrupt with number 1. This message first hits the I/O MMU that
will use the interrupt remapping table to translate to a new message destined for
the CPU that currently runs the virtual machine and with the vector number that
the VM expects (e.g., 66).
And finally, having an I/O MMU allows 32-bit devices to access memory
above 4 GB. Normally, such devices are unable to access (e.g., DMA to) addresses
beyond 4 GB, but the I/O MMU can easily remap the device’s lower addresses to
any address in the physical larger address space.
Device Domains
A different approach to handling I/O is to dedicate one of the virtual machines
to run a standard operating system and reflect all I/O calls from the other ones to it.
This approach is enhanced when paravirtualization is used, so the command being
issued to the hypervisor actually says what the guest OS wants (e.g., read block
1403 from disk 1) rather than being a series of commands writing to device 
registers, in which case the hypervisor has to play Sherlock Holmes and figure out what
it is trying to do. Xen uses this approach to I/O, with the virtual machine that does
I/O called domain 0.
I/O virtualization is an area in which type 2 hypervisors have a practical 
advantage over type 1 hypervisors: the host operating system contains the device drivers
for all the weird and wonderful I/O devices attached to the computer. When an
application program attempts to access a strange I/O device, the translated code
can call the existing device driver to get the work done. With a type 1 hypervisor,
