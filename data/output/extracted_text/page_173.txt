144
PROCESSES AND THREADS
CHAP. 2
public class ProducerConsumer {
static final int N = 100;
// constant giving the buffer size
static producer p = new producer( );
// instantiate a new producer thread
static consumer c = new consumer( ); // instantiate a new consumer thread
static our monitor mon = new our monitor( );
// instantiate a new monitor
public static void main(String args[ ]) {
p.star t( ); 
// star t the producer thread
c.star t( ); 
// star t the consumer thread
}
static class producer extends Thread {
public void run( ) { // run method contains the thread code
int item;
while (true) {
// producer loop
item = produce item( );
mon.inser t(item);
}
}
pr ivate int produce item( ) { ... }
// actually produce
}
static class consumer extends Thread {
public void run( ) { run method contains the thread code
int item;
while (true) {
// consumer loop
item = mon.remove( );
consume item (item);
}
}
pr ivate void consume item(int item) { ... }// actually consume
}
static class our monitor { // this is a monitor
pr ivate int buffer[ ] = new int[N];
pr ivate int count = 0, lo = 0, hi = 0; // counters and indices
public synchronized void insert(int val) {
if (count == N) go to sleep( );
// if the buffer is full, go to sleep
buffer [hi] = val; // inser t an item into the buffer
hi = (hi + 1) % N;
// slot to place next item in
count = count + 1;
// one more item in the buffer now
if (count == 1) notify( ); 
// if consumer was sleeping, wake it up
}
public synchronized int remove( )  {
int val;
if (count == 0) go to sleep( );
// if the buffer is empty, go to sleep
val = buffer [lo]; // fetch an item from the buffer
lo = (lo + 1) % N;
// slot to fetch next item from
count = count < 1; 
// one few items in the buffer
if (count == N < 1) notify( ); // if producer was sleeping, wake it up
retur n val;
}
pr ivate void go to sleep( ) { try{wait( );} catch(Interr uptedException exc) {};}
}
}
Fig. 2-36. A solution to the producer-consumer problem in Java.
