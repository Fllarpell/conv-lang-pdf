SEC. 7.10
OS-LEVEL VIRTUALIZATION
507
some researchers argue that hypervisor-based virtualization need not be more
heavyweight than containers at all, as long as you reduce the virtual machines to a
unikernel (Manco et al., 2017).
7.11 CASE STUDY: VMWARE
Since 1999, VMware, Inc. has been the leading commercial provider of 
hypervisor-based virtualization solutions with products for desktops, servers, the cloud,
and now even on cell phones. It provides not only hypervisors but also the software
that manages virtual machines on a large scale.
We will start this case study with a brief history of how the company got 
started. We will then describe VMware Workstation, a type 2 hypervisor and the 
company’s first product, the challenges in its design and the key elements of the 
solution. We then describe the evolution of VMware Workstation over the years. We
conclude with a description of ESX Server, VMware’s type 1 hypervisor.
7.11.1 The Early History of VMware
Although the idea of using virtual machines was popular in the 1960s and
1970s in both the computing industry and academic research, interest in 
virtualization was totally lost after the 1980s and the rise of the personal computer
industry. Only IBM’s mainframe division still cared about virtualization. Indeed,
the computer architectures designed at the time, and in particular Intel’s x86 
architecture, did not provide architectural support for virtualization (i.e., they failed the
Popek/Goldberg criteria). This is extremely unfortunate, since the 386 CPU, a
complete redesign of the 286, was done a decade after the Popek-Goldberg paper,
and the designers should have known better.
In 1997, at Stanford, three of the future founders of VMware had built a 
prototype hypervisor called Disco (Bugnion et al., 1997), with the goal of running 
commodity operating systems (in particular UNIX) on a very large scale 
multiprocessor then being developed at Stanford: the FLASH machine. During that project, the
authors realized that using virtual machines could solve, simply and elegantly, a
number of hard system software problems: rather than trying to solve these 
problems within existing operating systems, one could innovate in a layer below 
existing operating systems. The key observation of Disco was that, while the high 
complexity of modern operating systems made innovation difficult, the relative 
simplicity of a virtual machine monitor and its position in the software stack provided a
powerful foothold to address limitations of operating systems. Although Disco was
aimed at very large servers, and designed for the MIPS architecture, the authors
realized that the same approach could equally apply, and be commercially relevant,
for the x86 marketplace.
