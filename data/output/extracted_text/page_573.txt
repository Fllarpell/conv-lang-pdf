544
MULTIPLE PROCESSOR SYSTEMS
CHAP. 8
Symmetric Multiprocessors
Our third model, the SMP (Symmetric MultiProcessor), eliminates this
asymmetry. There is one copy of the operating system in memory, but any CPU
can run it. When a system call is made, the CPU on which the system call was
made traps to the kernel and processes the system call. The SMP model is 
illustrated in Fig. 8-9.
Runs
users and
shared OS
CPU 1
Runs
users and
shared OS
CPU 2
Runs
users and
shared OS
CPU 3
Runs
users and
shared OS
OS
CPU 4
Memory
I/O
Locks
Bus
Figure 8-9. The SMP multiprocessor model.
This model balances processes and memory dynamically, since there is only
one set of operating system tables. It also eliminates the leader CPU bottleneck,
since there is no leader, but it introduces its own problems. In particular, if two or
more CPUs are running operating system code at the same time, disaster may well
result. Imagine two CPUs simultaneously picking the same process to run or
claiming the same free memory page. The simplest way around these problems is
to associate a mutex (i.e., lock) with the operating system, making the whole 
system one big critical region. When a CPU wants to run operating system code, it
must first acquire the mutex. If the mutex is locked, it just waits. In this way, any
CPU can run the operating system, but only one at a time. This approach is 
sometimes called a big kernel lock.
This model works, but is almost as bad as the leader-follower model. Again,
suppose that 10% of all run time is spent inside the operating system. With 20
CPUs, there will be long queues of CPUs waiting to get in. Fortunately, it is easy
to improve. Many parts of the operating system are independent of one another.
For example, there is no problem with one CPU running the scheduler while 
another CPU is handling a file-system call and a third one is processing a page fault.
This observation leads to splitting the operating system up into multiple 
independent critical regions that do not interact with one another. Each critical region is
protected by its own mutex, so only one CPU at a time can execute it. In this way,
far more parallelism can be achieved. However, it may well happen that some
tables, such as the process table, are used by multiple critical regions. For example,
the process table is needed for scheduling, but also for the fork system call and also
for signal handling. Each table that may be used by multiple critical regions needs
