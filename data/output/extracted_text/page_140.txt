SEC. 2.2
THREADS
111
block often, as, for example, in a multithreaded Web server. These threads are 
constantly making system calls. Once a trap has occurred to the kernel to carry out the
system call, it is hardly any more work for the kernel to switch threads if the old
one has blocked, and having the kernel do this eliminates the need for constantly
making select system calls to see if read system calls are safe. For applications that
are CPU bound and rarely block, what is the point of having threads at all? No one
would seriously propose computing the first n prime numbers or playing chess
using threads because there is nothing to be gained by doing it that way.
2.2.5 Implementing Threads in the Kernel
Now let us consider having the kernel know about and manage the threads. As
shown in Fig. 2-15(b), there is now no need for a run-time system or thread table in
each process. Instead, the kernel has a thread table that keeps track of all the
threads in the system. When a thread wants to create a new thread or destroy an
existing thread, it makes a kernel call, which then does the creation or destruction
by updating the kernel thread table.
The kernel’s thread table holds each thread’s registers, state, and other 
information. The information is the same as with user-level threads, but now kept in the
kernel instead of in user space (inside the run-time system). This information is a
subset of the information that traditional kernels maintain about their 
singlethreaded processes, that is, the process state. In addition, the kernel also maintains
the traditional process table to keep track of processes.
All calls that might block a thread are implemented as system calls, at 
considerably greater cost than a call to a run-time system procedure. When a thread
blocks, the kernel may choose to run either another thread from the same process
(if one is ready) or a thread from a different process. With user-level threads, the
run-time system keeps running threads from its own process until the kernel takes
the CPU away from it (or there are no ready threads left to run).
Due to the relatively greater cost of creating and destroying threads in the 
kernel, some systems take an environmentally correct approach and recycle their
threads. When a thread is destroyed, it is marked as not runnable, but its kernel
data structures are not otherwise affected. Later, when a new thread must be 
created, an old thread is reactivated, saving some overhead. Thread recycling is also
possible for user-level threads, but since the thread-management overhead is much
smaller, there is less incentive to do this.
Kernel threads do not require any new, nonblocking system calls. In addition,
if one thread in a process causes a page fault, the kernel can easily check to see if
the process has any other runnable threads, and if so, run one of them while 
waiting for the required page to be brought in from the disk. Their main disadvantage is
that the cost of a system call is substantial, so if thread operations (creation, 
termination, etc.) are common, much more overhead will be incurred.
