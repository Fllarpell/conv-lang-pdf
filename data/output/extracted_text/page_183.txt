154
PROCESSES AND THREADS
CHAP. 2
daily statistics and one that serves user requests, the users will be a lot happier if
the latter gets first crack at the CPU.
The ‘‘abundance of resources’’ argument also does not hold on IoT devices and
sensor nodes, and perhaps not even on smartphones. Even if the CPUs on phones
have become more powerful and the memory more plentiful, battery lifetime has
not. Since battery lifetime is one of the most important constraints on all these
devices, some schedulers try to optimize the power consumption.
In addition to picking the right process to run, the scheduler also has to worry
about making efficient use of the CPU because process switching is expensive. To
start with, a switch from user mode to kernel mode must occur. Then the state of
the current process must be saved, including storing its registers in the process 
table so they can be reloaded later. In some systems, the memory map (e.g., memory
reference bits in the page table) must be saved as well. This is called a context
switch, although people sometimes also use this term to refer to the full process
switch. Next a new process must be selected by running the scheduling algorithm.
After that, the memory management unit (MMU) must be reloaded with the 
memory map of the new process. Finally, the new process must be started. In addition to
all that, the process switch may invalidate the memory cache and related tables,
forcing it to be dynamically reloaded from the main memory twice (upon entering
the kernel and upon leaving it). All in all, doing too many process switches per 
second can chew up a substantial amount of CPU time, so caution is advised.
Process Behavior
Nearly all processes alternate bursts of computing with (disk or network) I/O
requests, as shown in Fig. 2-40. Often, the CPU runs for a while without stopping,
then a system call is made to read from a file or write to a file. When the system
call completes, the CPU computes again until it needs more data or has to write
more data, and so on. Note that some I/O activities count as computing. For 
example, when the CPU copies bits to a video RAM to update the screen, it is 
computing, not doing I/O, because the CPU is in use. I/O in this sense is when a process
enters the blocked state waiting for an external device to complete its work.
The important thing to notice about Fig. 2-40 is that some processes, such as
the one in Fig. 2-40(a), spend most of their time computing, while other processes,
such as the one shown in Fig. 2-40(b), spend most of their time waiting for I/O.
The former are called compute-bound or CPU-bound; the latter are called 
I/Obound. Compute-bound processes typically have long CPU bursts and thus 
infrequent I/O waits, whereas I/O-bound processes have short CPU bursts and thus 
frequent I/O waits. Note that the key factor is the length of the CPU burst, not the
length of the I/O burst. I/O-bound processes are I/O bound because they do not
compute much between I/O requests, not because they hav e especially long I/O
requests. It takes the same time to issue the hardware request to read a disk block
no matter how much or how little time it takes to process the data after they arrive.
