880
CASE STUDY 2: WINDOWS 11
CHAP. 11
Android applications. The most significant advance Windows 11 brings, however,
is the much higher security baseline. While many of its security features were 
present on earlier releases, Windows 11 sets its minimum hardware requirements such
that all of these security protections (such as Secure Boot, Device Guard, 
Application Guard, and kernel-mode Control Flow Guard) can be used. All of them are
enabled by default. The higher security baseline, along with new security features
such as kernel-mode Hardware Stack Protection, makes Windows 11 the most
secure version of Windows ever.
In the rest of this chapter, we will describe how Windows 11 works, how it is
structured, and what these security features do. Although we will use the generic
name of ‘‘Windows,’’ all subsequent sections in this chapter refer to Windows 11.
11.2 PROGRAMMING WINDOWS
It is now time to start our technical study of Windows. Before getting into the
details of the internal structure, however, we will take a look at the native NT API
for system calls, the Win32 programming subsystem introduced as part of 
NTbased Windows, and the WinRT programming environment first introduced with
Windows 8.
Figure 11-4 shows the layers of the Windows operating system. Beneath the
GUI layers of Windows are the programming interfaces that applications build on.
As in most operating systems, these consist largely of code libraries (DLLs) to
which programs dynamically link for access to operating system features. Some of
these libraries are client libraries which use RPCs (Remote Procedure Calls) to
communicate with operating system services running in separate processes.
The core of the NT operating system is the NTOS kernel-mode program
(ntoskrnl.exe), which provides the traditional system-call interfaces upon which the
rest of the operating system is built. In Windows, only programmers at Microsoft
write to the native system-call layer. The published user-mode interfaces all 
belong to operating system personalities that are implemented using subsystems that
run on top of the NTOS layers.
Originally, NT supported three personalities: OS/2, POSIX, and Win32. OS/2
was discarded in Windows XP. Support for POSIX was finally removed in 
Windows 8.1. Today all Windows applications are written using APIs that are built on
top of the Win32 subsystem, such as the WinRT API used for building Universal
Windows Platform applications or the cross-platform CoreFX API in the .NET
(Core) software framework. Furthermore, through the win32metadata GitHub
project, Microsoft publishes a description of the entire Win32 API surface in a
standard format (called ECMA-335) such that language projections can be built
to allow the API to be called from arbitrary languages like C# and Rust. This
allows applications written in languages other than C/C++ to work on Windows.
