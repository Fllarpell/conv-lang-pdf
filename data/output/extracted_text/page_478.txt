SEC. 6.3
THE OSTRICH ALGORITHM
449
printer cannot be carried out because the device is busy. Typically it is up to the
device driver to decide what action to take under such circumstances. Blocking or
returning an error code are two obvious possibilities. If one process successfully
opens the scanner and another successfully opens the printer and then each process
tries to open the other one and blocks trying, we have a deadlock. Few current 
systems will detect this.
6.4 DEADLOCK DETECTION AND RECOVERY
A second technique is detection and recovery. When this technique is used,
the system does not attempt to prevent deadlocks from occurring. Instead, it lets
them occur, tries to detect when this happens, and then takes some action to
recover after the fact. In this section, we will look at some of the ways deadlocks
can be detected and some of the ways recovery from them can be handled.
6.4.1 Deadlock Detection with One Resource of Each Type
Let us begin with the simplest case: there is only one resource of each type and
each device can be acquired by a single process. As an example, consider a system
with six resources: a Blu-ray recorder (R), a scanner (S), a tape drive (T), a USB
microphone (U), a video camera (V), and a wafer cutter (W)—but no more than
one of each class of resource. In other words, we are excluding systems with, say,
two scanners for the moment. We will treat them later, using a different method.
The six resources, R through W, are used by seven processes, A though G. The
state of which resources are currently owned and which ones are currently being
requested is as follows:
1. Process A holds R and wants S.
2. Process B holds nothing but wants T.
3. Process C holds nothing but wants S.
4. Process D holds U and wants S and T.
5. Process E holds T and wants V.
6. Process F holds W and wants S.
7. Process G holds V and wants U.
The question is: ‘‘Is this system deadlocked, and if so, which processes are 
involved?’’ To answer this question, we can construct a resource graph of the sort 
illustrated in Fig. 6-6. If this graph contains one or more cycles, a deadlock exists.
Any process that is part of a cycle is deadlocked. If no cycles exist, the system is
not deadlocked and can continue executing normally.
