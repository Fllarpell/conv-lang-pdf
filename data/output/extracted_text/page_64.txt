SEC. 1.3
COMPUTER HARDWARE REVIEW
35
it remedied all these issues: UEFI allows for fast booting, different architectures,
and storage sizes up to 8 ZiB, or 8 Ã— 270 bytes. It is also so complex that trying to
understand it fully has sucked the happiness out of many a life. In this chapter, we
will cover both old and new style BIOS firmware, but only the essentials.
After we press the power button, the motherboard waits for the signal that the
power supply has stabilized. When the CPU starts executing, it fetches code from
a hard-coded physical address (known as the reset vector) that is mapped to the
flash memory. In other words, it executes code from the BIOS which detects and
initializes various resources, such as RAM, the Platform Controller Hub (see Fig.
Fig. 1-12), and interrupt controllers. In addition, it scans the PCI and/or PCIe buses
to detect and initialize all devices attached to them. If the devices present are 
different from when the system was last booted, it also configures the new devices.
Finally, it sets up the runtime firmware which offers critical services (including
low-level I/O) that can be used by the system after booting.
Next, it is time to move to the next stage of the booting process. In systems
using the old-style BIOS, this was all very straightforward. The BIOS would 
determine the boot device by trying a list of devices stored in the CMOS memory. The
user can change this list by entering a BIOS configuration program just after 
booting. For instance, you may ask the system to attempt to boot from a USB drive, if
one is present. If that fails, the system boots from the hard disk or SSD. The first
sector from the boot device is read into memory and executed. This sector, known
as the MBR (Master Boot Record), contains a program that normally examines
the partition table at the end of the boot sector to determine which partition is
active. A partition is a distinct region on the storage device that may for instance
contain its own file systems. Then a secondary boot loader is read in from that 
partition. This loader reads in the operating system from the active partition and starts
it. The operating system then queries the BIOS to get the configuration 
information. For each device, it checks to see if it has the device driver. If not, it asks
the user to install it, for instance by downloading it from the Internet. Once it has
all the device drivers, the operating system loads them into the kernel. Then it 
initializes its tables, creates whatever background processes are needed, and starts up
a login program or GUI.
With UEFI, things are different. First, it no longer relies on a Master Boot
Record residing in the first sector of the boot device, but it looks for the location of
the partition table in the second sector of the device. This GPT (GUID Partition
Table) contains information about the location of the various partitions on the SSD
or disk. Second, the BIOS itself has enough functionality to read file systems of
specific types. According to the UEFI standard, it should support at least the
FAT-12, FAT -16, and FAT -32 types. One such file system is placed in a special 
partition, known as the EFI system partition (ESP). Rather than a single magic boot
sector, the boot process can now use a proper file system containing programs,
configuration files, and anything else that may be useful during boot. Moreover,
UEFI expects the firmware to be able to execute programs in a specific format,
