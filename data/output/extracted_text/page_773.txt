744
CASE STUDY 1: UNIX, LINUX, AND ANDROID 
CHAP. 10
sophisticated paging hardware. This is an area of the design that has barely 
changed in decades. It has worked well so it has not needed much revision. We will
now examine the model and how it is implemented.
10.4.1 Fundamental Concepts
Every Linux process has an address space that logically consists of three 
segments: text, data, and stack. An example process’ address space is illustrated in
Fig. 10-12(a) as process A. The text segment contains the machine instructions
that form the program’s executable code. It is produced by the compiler and
assembler by translating the C, C++, or other program into machine code. The text
segment is normally read-only. Self-modifying programs went out of style in
about 1950 because they were too difficult to understand and debug. Thus the text
segment neither grows nor shrinks nor changes in any other way.
Text
BSS
Data
Stack pointer
Stack pointer
20K
8K
0
Unused!
memory
24K
8K
0K
BSS
Text
Data
(a)
(b)
(c)
OS
Physical memory
Process A
Process B
Figure 10-12. (a) Process A’s virtual address space. (b) Physical memory.
(c) Process B’s virtual address space.
The data segment contains storage for all the program’s variables, strings,
arrays, and other data. It has two parts, the initialized data and the uninitialized
data. For historical reasons, the latter is known as the BSS (historically called
Block Started by Symbol). The initialized part of the data segment contains 
variables and compiler constants that need an initial value when the program is started.
All the variables in the BSS part are initialized to zero after loading.
For example, in C it is possible to declare a character string and initialize it at
the same time. When the program starts up, it expects that the string has its initial
value. To implement this construction, the compiler assigns the string a location in
the address space, and ensures that when the program is started up, this location
contains the proper string. From the operating system’s point of view, initialized
