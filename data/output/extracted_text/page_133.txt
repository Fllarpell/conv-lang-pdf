104
PROCESSES AND THREADS
CHAP. 2
Per-process items
Per-thread items
Address space
Program counter
Global var iables 
Registers
Open files
Stack
Child processes
State
Pending alarms
Signals and signal handlers
Accounting infor mation
Figure 2-11. The first column lists some items shared by all threads in a process.
The second one lists some items private to each thread.
trying to achieve with the thread concept is the ability for multiple threads of
execution to share a set of resources so that they can work together closely to 
perform some task.
Like a traditional process (i.e., a process with only one thread), a thread can be
in any one of several states: running, blocked, ready, or terminated. A running
thread currently has the CPU and is active. In contrast, a blocked thread is waiting
for some event to unblock it. For example, when a thread performs a system call to
read from the keyboard, it is blocked until input is typed. A thread can block 
waiting for some external event to happen or for some other thread to unblock it. A
ready thread is scheduled to run and will as soon as its turn comes up. The 
transitions between thread states are the same as those between process states and are
illustrated in Fig. 2-2.
It is important to realize that each thread has its own stack, as illustrated in
Fig. 2-12. Each thread’s stack contains one frame for each procedure called but
not yet returned from. This frame contains the procedure’s local variables and the
return address to use when the procedure call has finished. For example, if 
procedure X calls procedure Y and Y calls procedure Z, then while Z is executing, the
frames for X, Y, and Z will all be on the stack. Each thread will generally call 
different procedures and thus have a different execution history. This is why each
thread needs its own stack.
When multithreading is present, processes usually start with a single thread
present. This thread has the ability to create new threads by calling a library 
procedure such as thread create. A parameter to thread create specifies the name of a
procedure for the new thread to run. It is not necessary (or even possible) to specify
anything about the new thread’s address space, since it automatically runs in the
address space of the creating thread. Sometimes threads are hierarchical, with a
parent-child relationship, but often no such relationship exists, with all threads
being equal. With or without a hierarchical relationship, the creating thread is
usually returned a thread identifier that names the new thread.
When a thread has finished its work, it can exit by calling a library procedure,
say, thread exit. It then vanishes and is no longer schedulable. In some thread
