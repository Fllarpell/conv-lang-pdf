SEC. 2.1
PROCESSES
87
finished (for the time being), the physical program counter is saved in the processâ€™
stored logical program counter in memory. In Fig. 2-1(c) we see that, viewed over
a long enough time interval, all the processes have made progress, but at any giv en
instant only one process is actually running.
A
B
C
D
D!
C!
B!
A
Process!
switch
One program counter
Four program counters
Process
Time
B
C
D
A
(a)
(b)
(c)
Figure 2-1. (a) Multiprogramming four programs. (b) Conceptual model of four
independent, sequential processes. (c) Only one program is active at once.
In this chapter, we will assume there is only one CPU. Often that assumption
does not hold, since new chips are often multicore, with two, four, or more cores.
We will look at multicore chips and multiprocessors in general in Chap. 8, but for
the time being, it is simpler just to think of one CPU at a time. So when we say that
a CPU can really run only one process at a time, if there are two cores (or CPUs)
each of them can run only one process at a time.
With the CPU switching back and forth among multiple processes, the rate at
which a process performs its computation will not be uniform and probably not
ev en reproducible if the same processes are run again. Thus, processes must not be
programmed with built-in assumptions about their speed. Consider, for example,
an audio process that plays music to accompany a high-quality video run by 
another core. Because the audio should start a little later than the video, it signals the
video server to start playing, and then runs an idle loop 10,000 times before 
playing back the audio. All goes well, if the loop is a reliable timer, but if the CPU 
decides to switch to another process during the idle loop, the audio process may not
run again until the corresponding video frames have already come and gone, and
the video and audio will be annoyingly out of sync. When a process has critical
real-time requirements like this, that is, particular events must occur within a 
specified number of milliseconds, special measures must be taken to ensure that they do
occur. Normally, howev er, most processes are not affected by the underlying 
multiprogramming of the CPU or the relative speeds of different processes.
The difference between a process and a program is subtle, but absolutely 
crucial. An analogy may help you here. Consider a culinary-minded computer 
scientist who is baking a birthday cake for his young daughter. He has a birthday cake
recipe and a kitchen well stocked with all the input: flour, eggs, sugar, extract of
