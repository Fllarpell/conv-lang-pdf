611
7. Principle of Open Design. This states plain and simple that the
design should not be secret and generalizes what is known as 
Kerckhoffs’ principle in cryptography. In 1883, the Dutch-born Auguste
Kerckhoffs published two journal articles on military cryptography
that stated that a cryptosystem should be secure even if everything
about the system, except the key, is public knowledge. In other words,
do not rely on ‘‘security by obscurity,’’ but assume that the adversary
immediately gains total familiarity with your system and knows the
encryption and decryption algorithms. In modern terms, it means you
should assume the enemy has the source code to the security system.
Even better, you should publish it yourself to avoid fooling yourself
into thinking it is secret. It is probably not.
8. Principle of Psychological Acceptability. The final principle is not
a technical one at all. Security rules and mechanisms should be easy
to use and understand. However, acceptability entails more. Besides
the usability of the mechanism, it should also be clear why the rules
and mechanisms are necessary in the first place.
9.1.3 Security of the Operating System Structure
The operating system is responsible for providing a foundation on which
developers can build applications in their own security domains, and for protecting
their confidentiality, integrity and availability. To do so, it uses the security 
principles of the previous paragraph—to isolate the security domains from each other
and mediate all operations that may violate the isolation, and all the other nice
things.
As we saw in Sec. 1.7, there are different ways to design an operating system.
It turns out that the structure matters for security and some designs are inherently
incompatible with some of the security principles. For instance, in early operating
systems of the past, and many embedded systems today, there is no isolation 
whatsoever. All application and operating system functionality runs in a single security
domain. In such a design, there is no notion of privilege separation or POLA.
Another important class of operating systems follows a monolithic design
where most of the operating system resides in a single security domain, but 
isolated from the applications. The applications are also isolated from each other.
Most general-purpose operating systems follow this design. Since the components
of the operating system can interact using function calls and shared memory, it is
very efficient. In addition, the design protects the more privileged parts of the 
system (the kernel of the operating system) from the less privileged parts (user 
processes). However, if attackers manage to compromise any component in the 
monolithic kernel, all security guarantees are toast.
SEC. 9.1
FUNDAMENTALS OF OPERATING SYSTEM SECURITY
