SEC. 1.6
SYSTEM CALLS
53
jumps to a single fixed location (this is the case for the x86-4 SYSCALL instruction)
or there is an 8-bit field in the instruction giving the index into a table in memory
containing jump addresses, or equivalent.
The kernel code that starts following the trap examines the system-call number
in the RAX register and then dispatches to the correct system-call handler, usually
via a table of pointers to system-call handlers indexed on system-call number (step
7). At that point, the system-call handler runs (step 8). Once it has completed its
work, control may be returned to the user-space library procedure at the instruction
following the trap instruction (step 9). This procedure then returns to the user 
program in the usual way procedure calls return (step 10), which then continues with
the next instruction in the program (step 11).
In step 9 above, we said ‘‘may be returned to the user-space library procedure’’
for good reason. The system call may block the caller, preventing it from 
continuing. For example, if it is trying to read from the keyboard and nothing has been
typed yet, the caller has to be blocked. In this case, the operating system will look
around to see if some other process can be run next. Later, when the desired input
is available, this process will get the attention of the system and run steps 9 and 10.
In the following sections, we will examine some of the most heavily used
POSIX system calls, or more specifically, the library procedures that make those
system calls. POSIX has about 100 procedure calls. Some of the most important
ones are listed in Fig. 1-18, grouped for convenience in four categories. In the text,
we will briefly examine each call to see what it does.
To a large extent, the services offered by these calls determine most of what
the operating system has to do, since the resource management on personal 
computers is minimal (at least compared to big machines with multiple users). The
services include things like creating and terminating processes, creating, deleting,
reading, and writing files, managing directories, and performing input and output.
As an aside, it is worth pointing out that the mapping of POSIX procedure
calls onto system calls is not one-to-one. The POSIX standard specifies a number
of procedures that a conformant system must supply, but it does not specify 
whether they are system calls, library calls, or something else. If a procedure can be 
carried out without invoking a system call (i.e., without trapping to the kernel), it will
usually be done in user space for reasons of performance. However, most of the
POSIX procedures do invoke system calls, usually with one procedure mapping
directly onto one system call. In a few cases, especially where several required
procedures are only minor variations of one another, one system call handles more
than one library call.
1.6.1 System Calls for Process Management
The first group of calls in Fig. 1-18 deals with process management. Fork is a
good place to start the discussion. Fork is the only way to create a new process in
POSIX. It creates an exact duplicate of the original process, including all the file
