SEC. 3.3
VIRTUAL MEMORY
197
15!
14!
13!
12!
11!
10!
9!
8!
7!
6!
5!
4!
3!
2!
1!
0
000!
000!
000!
000!
111!
000!
101!
000!
000!
000!
011!
100!
000!
110!
001!
010
0!
0!
0!
0!
1!
0!
1!
0!
0!
0!
1!
1!
1!
1!
1!
1
Present/!
absent bit
Page!
table
12-bit offset!
copied directly!
from input!
to output
Virtual page = 2 is used!
as an index into the!
page table
Incoming!
virtual!
address!
(8196)
Outgoing!
physical!
address!
(24580)
110
1 1 0 0 0 0 0 0 0 0 0 0 1 0 0
0
0
1 0 0 0 0 0 0 0 0 0 0 1 0 0
Figure 3-10. The internal operation of the MMU with 16 4-KB pages.
16-bit address and a 4-KB page size, the upper 4 bits could specify one of the 16
virtual pages and the lower 12 bits would then specify the byte offset (0 to 4095)
within the selected page. However, a split with 3 or 5 or some other number of bits
for the page is also possible. Different splits imply different page sizes.
The virtual page number is used as an index into the page table to find the
entry for that virtual page. From the page table entry, the page frame number (if
any) is found. The page frame number is attached to the high-order end of the 
offset, replacing the virtual page number, to form a physical address that can be sent
to the memory.
Thus, the purpose of the page table is to map virtual pages onto page frames.
Mathematically speaking, the page table is a function, with the virtual page 
number as the argument and the physical frame number as result. Using the result of
this function, the virtual page field in a virtual address can be replaced by a page
frame field, thus forming a physical memory address.
