SEC. 9.1
FUNDAMENTALS OF OPERATING SYSTEM SECURITY
609
example, if a computer is an Internet server, sending a flood of requests to it may
cripple it by eating up all of its CPU time just examining and discarding incoming
requests. If it takes, say, 100 Âµsec to process an incoming request to read a Web
page, then anyone who manages to send 10,000 requests/sec can wipe it out. 
Reasonable models and technology for dealing with attacks on confidentiality and
integrity are available; foiling denial-of-service attacks is much harder.
Later on, people decided that three fundamental properties were not enough for
all possible scenarios, and so they added additional ones, such as authenticity,
accountability, nonrepudiability, and others. Clearly, these are all nice to have.
Even so, the original three still have a special place in the hearts and minds of most
(elderly) security experts.
9.1.2 Security Principles
While the challenges related to safeguarding these properties have also evolved
over the past few decades, the principles have stayed mostly the same. For
instance, when few people had their own computers and most computing was done
on multiuser (often mainframe-based) computer systems with limited connectivity,
security was mostly focused on isolating users or classes of users from each other.
Isolation guarantees the separation of components (programs, computer systems,
or even entire networks) that belong to different security domains or have different
privileges. All interaction between the different components that takes place is
mediated with proper privilege checks. Today, isolation is still a key ingredient of
security. Even the entities to isolate have remained, by and large, the same. We will
refer to them as security domains. Traditional security domains for operating 
systems are processes and kernels, and for hypervisors, virtual machines (VMs).
Since then, some security domains (such as trusted execution environments) have
been added to the mix, but these are still the main security domains today. There is
no doubt, however, that the threats have evolved tremendously, and in response, so
have the protection mechanisms.
While addressing security concerns in all layers of the network stack is 
certainly necessary, it is very difficult to determine when you have addressed them
sufficiently and if you have addressed them all. In other words, guaranteeing 
security is hard. Instead, we try to improve security as much as we can by consistently
applying a set of security principles. Classic security principles for operating 
systems were formulated as early as 1975 by Jerome Saltzer and Michael Schroeder:
1. Principle of economy of mechanism. This principle is sometimes
paraphrased as the principle of simplicity. Complex systems always
have more bugs than simple systems. Moreover, users may not 
understand them well and use them in a wrong or insecure way. Simple 
systems are good systems. This is also true for security solutions. One of
the reasons Multics did not catch on as an operating system big time
is that many users and developers found it cumbersome in practice.
