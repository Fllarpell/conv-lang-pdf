996
CASE STUDY 2: WINDOWS 11
CHAP. 11
Several comments are worth making here. First, there is no upper limit to the
size of streams that can be represented this way. In the absence of address 
compression, each pair requires two 64-bit numbers in the pair for a total of 16 bytes.
However, a pair could represent 1 million or more consecutive disk blocks. In fact,
a 20-GB stream consisting of 20 separate runs of 1 million 1-KB blocks each fits
easily in one MFT record, whereas a 60-KB stream scattered into 60 isolated
blocks does not.
Second, while the straightforward way of representing each pair takes 2 × 8
bytes, a compression method is available to reduce the size of the pairs below 16.
Many disk addresses have multiple high-order zero-bytes. These can be omitted.
The data header tells how many are omitted, that is, how many bytes are actually
used per address. Other kinds of compression are also used. In practice, the pairs
are often only 4 bytes.
Our first example was easy: all the file information fit in one MFT record.
What happens if the file is so large or highly fragmented that the block information
does not fit in one MFT record? The answer is simple: use two or more MFT
records. In Fig. 11-47, we see a file whose base record is in MFT record 102. It
has too many runs for one MFT record, so it computes how many extension
records it needs, say, two, and puts their indices in the base record. The rest of the
record is used for the first k data runs.
109
108
106
105
103
102
100
Run #m+1
Run n
Run #k+1
Run m
MFT 105
Run #1
MFT 108
Run #k
Second extension record
First extension record
Base record
101
104
107
Figure 11-47. A file that requires three MFT records to store all its runs.
Note that Fig. 11-47 contains some redundancy. In theory, it should not be 
necessary to specify the end of a sequence of runs because this information can be 
calculated from the run pairs. The reason for ‘‘overspecifying’’ this information is to
make seeking more efficient: to find the block at a given file offset, it is necessary
to examine only the record headers, not the run pairs.
When all the space in record 102 has been used up, storage of the runs 
continues with MFT record 105. As many runs are packed in this record as fit. When
this record is also full, the rest of the runs go in MFT record 108. In this way, many
MFT records can be used to handle large fragmented files.
A problem arises if so many MFT records are needed that there is no room in
the base MFT to list all their indices. There is also a solution to this problem: the
