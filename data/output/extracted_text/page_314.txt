SEC. 4.3
FILE-SYSTEM IMPLEMENTATION
285
linked list of all disk blocks is proportional in size to the disk itself. If the disk has
n blocks, the table needs n entries. As disks grow larger, this table grows linearly
with them. In contrast, the i-node scheme requires an array in memory whose size
is proportional to the maximum number of files that may be open at once. It does
not matter if the disk is 500 GB, 500 TB, or 500 PB.
One problem with i-nodes is that if each one has room for a fixed number of
disk addresses, what happens when a file grows beyond this limit? One solution is
to reserve the last disk address not for a data block, but instead for the address of a
block containing more disk-block addresses, as shown in Fig. 4-15. Even more
advanced would be two or more such blocks containing disk addresses or even disk
blocks pointing to other disk blocks full of addresses. We will come back to 
inodes when studying UNIX in Chap. 10. Similarly, the Windows NTFS file 
system uses a similar idea, only with bigger i-nodes that can also contain small files.
4.3.3 Implementing Directories
Before a file can be read, it must be opened. When a file is opened, the 
operating system uses the path name supplied by the user to locate the directory entry on
the disk. The directory entry provides the information needed to find the disk
blocks. Depending on the system, this information may be the disk address of the
entire file (with contiguous allocation), the number of the first block (both 
linked-list schemes), or the number of the i-node. In all cases, the main function of the
directory system is to map the ASCII name of the file onto the information needed
to locate the data.
A closely related issue is where the attributes should be stored. Every file 
system maintains various file attributes, such as each file’s owner and creation time,
and they must be stored somewhere. One obvious possibility is to store them
directly in the directory entry. Some systems do precisely that. This option is
shown in Fig. 4-16(a). In this simple design, a directory consists of a list of 
fixedsize entries, one per file, containing a (fixed-length) file name, a structure of the
file attributes, and one or more disk addresses (up to some maximum) telling
where the disk blocks are.
For systems that use i-nodes, another possibility for storing the attributes is in
the i-nodes, rather than in the directory entries. In that case, the directory entry can
be shorter: just a file name and an i-node number. This approach is illustrated in
Fig. 4-16(b). As we shall see later, this method has some advantages over putting
them in the directory entry.
So far we have made the implicit assumption that files have short, fixed-length
names. In MS-DOS files have a 1–8 character base name and an optional extension
of 1–3 characters. In UNIX Version 7, file names were 1–14 characters, including
any extensions. However, nearly all modern operating systems support longer, 
variable-length file names. How can these be implemented?
