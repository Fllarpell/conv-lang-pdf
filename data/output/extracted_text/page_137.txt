108
PROCESSES AND THREADS
CHAP. 2
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#define NUMBER OF THREADS 
10
void *pr int hello world(void *tid)
{
/* This function prints the thread’s identifier and then exits. */
pr intf("Hello World. Greetings from thread %d\n", tid);
pthread exit(NULL);
}
int main(int argc, char *argv[])
{
/* The main program creates 10 threads and then exits. */
pthread t threads[NUMBER OF THREADS];
int status, i;
for(i=0; i < NUMBER OF THREADS; i++) {
pr intf("Main here. Creating thread %d\n", i);
status = pthread create(&threads[i], NULL, print hello world, (void *)i);
if (status != 0) {
pr intf("Oops. pthread create returned error code %d\n", status);
exit(-1);
}
}
exit(NULL);
}
Figure 2-14. An example program using threads.
When threads are managed in user space, each process needs its own private
thread table to keep track of the threads in that process. This table is analogous to
the kernel’s process table, except that it keeps track only of the per-thread 
properties, such as each thread’s program counter, stack pointer, registers, state, and so
forth. The thread table is managed by the run-time system. When a thread is moved
to the ready or blocked state, the information needed to restart it is stored in the
thread table, exactly the same way as the kernel stores information about processes
in the process table.
When a thread does something that may cause it to become blocked locally, for
example, waiting for another thread in its process to complete some work, it calls a
run-time system procedure. This procedure checks to see if the thread must be put
into blocked state. If so, it stores the thread’s registers (i.e., its own) in the thread
table, looks in the table for a ready thread to run, and reloads the machine registers
with the new thread’s sav ed values. As soon as the stack pointer and program
