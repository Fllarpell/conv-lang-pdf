126
PROCESSES AND THREADS
CHAP. 2
lock. The operations of reading the word and storing into it are guaranteed to be
indivisibleâ€”no other processor can access the memory word until the instruction is
finished. The CPU executing the TSL instruction locks the memory bus to prohibit
other CPUs from accessing memory until it is done.
It is important to note that locking the memory bus is very different from 
disabling interrupts. Disabling interrupts then performing a read on a memory word
followed by a write does not prevent a second processor on the bus from accessing
the word between the read and the write. In fact, disabling interrupts on processor
1 has no effect at all on processor 2. The only way to keep processor 2 out of the
memory until processor 1 is finished is to lock the bus, which requires a special
hardware facility (basically, a bus line asserting that the bus is locked and not 
available to processors other than the one that locked it).
To use the TSL instruction, we will use a shared variable, lock, to coordinate
access to shared memory. When lock is 0, any process may set it to 1 using the TSL
instruction and then read or write the shared memory. When it is done, the process
sets lock back to 0 using an ordinary move instruction.
How can this instruction be used to prevent two processes from simultaneously
entering their critical regions? The solution is given in Fig. 2-25. It shows a
four-instruction subroutine in a fictitious (but typical) assembly language. The first
instruction copies the old value of lock to the register and then sets lock to 1. Then
the old value is compared with 0. If it is nonzero, the lock was already set, so the
program just goes back to the beginning and tests it again. Sooner or later, it will
become 0 (when the process currently in its critical region is done with its critical
region), and the subroutine returns, with the lock set. Clearing the lock is very 
simple. The program just stores a 0 in lock. No special synchronization instructions
are needed.
enter region:
TSL REGISTER,LOCK
| copy lock to register and set lock to 1
CMP REGISTER,#0
| was lock zero?
JNE enter region 
| if it was not zero, lock was set, so loop
RET 
| retur n to caller; critical region entered
leave region:
MOVE LOCK,#0
| store a 0 in lock
RET 
| retur n to caller
Figure 2-25. Entering and leaving a critical region using the TSL instruction.
One solution to the critical-region problem is now easy. Before entering its
critical region, a process calls enter region, which does busy waiting until the lock
is free; then it acquires the lock and returns. After leaving the critical region the
process calls leave region, which stores a 0 in lock. As with all solutions based on
