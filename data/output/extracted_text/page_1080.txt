SEC. 12.2
INTERFACE DESIGN
1051
Not only does UNIX unify files and I/O devices, but it also allows other 
processes to be accessed over pipes as files. Furthermore, when mapped files are 
supported, a process can get at its own virtual memory as though it were a file. Finally,
in versions of UNIX that support the /proc file system, the C statement
fd3 = open("/proc/501", O RDWR);
allows the process to (try to) access process 501’s memory for reading and writing
using file descriptor fd3, something useful for, say, a debugger.
Of course, just because someone says that everything is a file does not mean it
is true—for everything. For instance, UNIX network sockets may resemble files
somewhat, but they hav e their own, fairly different, socket API. Another operating
system, Plan 9 from Bell Labs, has not compromised and does not provide 
specialized interfaces for network sockets and such. As a result, the Plan 9 design is
arguably cleaner.
Windows tries to make everything look like an object. Once a process has
acquired a valid handle to a file, process, semaphore, mailbox, or other kernel
object, it can perform operations on it. This paradigm is even more general than
that of UNIX and much more general than that of FORTRAN.
Unifying paradigms occur in other contexts as well. One of them is worth
mentioning here: the Web. The paradigm behind the Web is that cyberspace is full
of documents, each of which has a URL. By typing in a URL or clicking on an
entry backed by a URL, you get the document. In reality, many ‘‘documents’’ are
not documents at all, but are generated by a program or shell script when a request
comes in. For example, when a user asks an online store for a list of songs by a
particular artist, the document is generated on-the-fly by a program; it certainly did
not exist before the query was made.
We hav e now seen four cases: namely, everything is a tape, file, object, or 
document. In all four cases, the intention is to unify data, devices, and other resources
to make them easier to deal with. Every operating system should have such a 
unifying data paradigm.
12.2.3 The System-Call Interface
If one believes in Corbato´’s dictum of minimal mechanism, then the operating
system should provide as few system calls as it can get away with, and each one
should be as simple as possible (but no simpler). A unifying data paradigm can
play a major role in helping here. For example, if files, processes, I/O devices, and
much more all look like files or objects, then they can all be read with a single read
system call. Otherwise it may be necessary to have separate calls for read file,
read proc, and read tty, among others.
Sometimes, system calls may need several variants, but it is often good 
practice to have one call that handles the general case, with different library procedures
