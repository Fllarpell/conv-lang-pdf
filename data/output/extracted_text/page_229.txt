200
MEMORY MANAGEMENT 
CHAP. 3
user programs start at 4K instead of 0 so that references to address 0 (which is
often an error) are trapped.
3.3.3 Speeding Up Paging
We hav e just seen the basics of virtual memory and paging. It is now time to
go into more detail about possible implementations. In any paging system, two
major issues must be faced:
1. The mapping from virtual address to physical address must be fast.
2. Even if the virtual address space itself is huge, the page table must not
be too large.
The first point is a consequence of the fact that the virtual-to-physical mapping
must be done on every memory reference. All instructions must ultimately come
from memory and many of them reference operands in memory as well. 
Consequently, it is necessary to make one, two, or sometimes more page table references
per instruction. If an instruction execution takes, say, 1  nsec, the page table lookup
must be done in under 0.2 nsec to avoid having the mapping become a major 
bottleneck.
The second point follows from the fact that all modern computers use virtual
addresses of at least 32 bits, with 64 bits becoming the norm for desktops and 
notebooks. Even if a modern processor uses only 48 out of the 64 bits for addressing,
with a 4-KB page size, a 48-bit address space has 64 billion pages. With 64 billion
pages in the virtual address space, the page table must have 64 billion entries of 64
bits each. Most people will agree that using hundreds of gigabytes just to store the
page table is a tad excessive. And remember that each process needs its own page
table (because it has its own virtual address space).
The need for fast page mapping for large address spaces is a very significant
constraint on the way computers are built nowadays. The simplest design (at least
conceptually) is to have a single page table consisting of an array of fast hardware
registers, with one entry for each virtual page, indexed by virtual page number, as
shown in Fig. 3-10. When a process is started up, the operating system loads the
registers with the processâ€™ page table, taken from a copy kept in main memory.
During process execution, no more memory references are needed for the page 
table. The advantages of this method are that it is straightforward and requires no
memory references during mapping. A disadvantage is that it is unbearably 
expensive if the page table is large; it is just not practical most of the time. Another one
is that having to load the full page table at every context switch would completely
kill performance.
At the other extreme, the page table can be entirely in main memory. All the
hardware needs then is a single register that points to the start of the page table.
This design allows the virtual-to-physical map to be changed at a context switch by
