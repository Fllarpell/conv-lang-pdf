SEC. 6.5
DEADLOCK AVOIDANCE
459
a certain number of credit units (e.g., 1 unit is 1K dollars). The banker knows that
not all customers will need their maximum credit immediately, so he has reserved
only 10 units rather than 22 to service them. (In this analogy, customers are 
processes, units are, say, printers, and the banker is the operating system.)
A
B
C
D
0
0
0
0
6
Has Max
5
4
7
Free: 10
A
B
C
D
1
1
2
4
6
Has Max
5
4
7
Free: 2
A
B
C
D
1
2
2
4
6
Has Max
5
4
7
Free: 1
(a)
(b)
(c)
Figure 6-14. Three resource allocation states: (a) safe. (b) safe. (c) unsafe.
The customers go about their respective businesses, making loan requests from
time to time (i.e., asking for resources). At a certain moment, the situation is as
shown in Fig. 6-14(b). This state is safe because with two units left, the banker can
delay any requests except C’s, thus letting C finish and release all four of his
resources. With four units in hand, the banker can let either D or B have the 
necessary units, and so on.
Consider what would happen if a request from B for one more unit were 
granted in Fig. 6-14(b). We would have situation Fig. 6-14(c), which is unsafe. If all
the customers suddenly asked for their maximum loans, the banker could not 
satisfy any of them, and we would have a deadlock. An unsafe state does not have to
lead to deadlock, since a customer might not need the entire credit line available,
but the banker cannot count on this behavior.
The banker’s algorithm considers each request as it occurs, seeing whether
granting it leads to a safe state. If it does, the request is granted; otherwise, it is
postponed until later. To see if a state is safe, the banker checks to see if he has
enough resources to satisfy some customer. If so, those loans are assumed to be
repaid, and the customer now closest to the limit is checked, and so on. If all loans
can eventually be repaid, the state is safe and the initial request can be granted.
6.5.4 The Banker’s Algorithm for Multiple Resources
The banker’s algorithm can be generalized to handle multiple resources. 
Figure 6-15 shows how it works.
In Fig. 6-15, we see two matrices. The one on the left shows how many of
each resource are currently assigned to each of the fiv e processes. The matrix on
the right shows how many resources each process still needs in order to complete.
These matrices are just C and R from Fig. 6-9. As in the single-resource case,
processes must state their total resource needs before executing, so that the system
can compute the right-hand matrix at each instant.
